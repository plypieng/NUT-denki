// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

model Student {
  id               String    @id @default(cuid())
  studentId        String    @unique              // 学籍番号
  fullName         String                         // 氏名
  imageUrl         String?                        // 写真URL
  birthDate        DateTime                       // 生年月日
  starSign         String?                        // 星座（birthDate→自動計算）
  hometown         String                         // 出身地
  almaMater        String                         // 出身高校・高専
  kosenDepartment  String?                        // 高専学科
  kosenThesis      String?                        // 卒研テーマ
  mbti             String?                        // MBTI
  hobby            String?                        // 趣味
  circle           String?                        // サークル
  caption          String?   @db.VarChar(100)     // 自己紹介キャプション（最大100文字）
  lineUrl          String?                        // LINEアカウントURL
  instagramUrl     String?                        // InstagramアカウントURL
  xUrl             String?                        // XアカウントURL
  likes            String?                        // 好き
  dislikes         String?                        // 嫌い
  goodSubjects     String?                        // 得意科目
  targetCourse     Specialty                      // 志望専門コース
  year             String                         // 学年 (B1, B2, B3, B4等)
  etcNote          String?                        // 備考
  ownerEmail       String?                        // プロフィールの所有者メール
  isPinned         Boolean   @default(false)      // ピン留めされているか
  favorited        UserFavorite[] @relation("favorited") // お気に入りに登録されたリレーション
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

enum Specialty {
  // 旧コース名（既存データとの互換性のために残す）
  電気電子情報工学コース
  機械システム工学コース
  物質材料工学コース
  
  // 電気電子情報工学分野の専門コース（新コース名）
  DENKI_ENERGY_CONTROL
  DENSHI_DEVICE_OPTICAL
  JOHO_COMMUNICATION
  
  // 他の分野のコース（新コース名）
  KIKAI_SYSTEM
  BUSSHITSU_MATERIALS
}

// お気に入りモデル
model UserFavorite {
  id         String   @id @default(cuid())
  userEmail  String   // お気に入りを付けたユーザーのメール
  student    Student  @relation("favorited", fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String   // お気に入りされた学生のID
  createdAt  DateTime @default(now())

  @@unique([userEmail, studentId]) // 同じユーザーが同じ学生をお気に入りに追加できないように
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
